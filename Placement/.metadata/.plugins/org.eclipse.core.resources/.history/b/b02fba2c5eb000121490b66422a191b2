import java.util.Random;


public class SimulatedAnnealer {
	private double alpha;
	
	public SimulatedAnnealer(double alpha)
	{
		this.alpha = alpha;
	}
	
	public Chip runSimulateAnnealer(String filename, int kMax, double startTemp)
	{
		Chip state = initializeChip(filename);
		Chip bestState = state;
		int cost = state.cost();
		int bestCost = cost;
		double temp = startTemp;
		
		int maxCost = state.cellCount()*(state.getHeight()+state.getWidth())*state.netCount();
		int k = 0;
		while(k < kMax && cost < maxCost)
		{
			temp = temp * alpha;
			System.out.println(temp);
			Chip newState = neighbour(state);
			int newCost = newState.cost();
			if(P(cost, newCost, temp) > randomPercentage())
			{
				state = newState;
				cost = newCost;
			}
			if(newCost < bestCost)
			{
				bestState = newState;
				bestCost = newCost;
			}
			k = k+1;
		}
		return bestState;
	}
	
	private Chip initializeChip(String filename)
	{
		return new Chip(filename);
	}
	
	private Chip neighbour(Chip state)
	{
		Chip newState = state;
		Random rand = new Random();
		int x1 = Math.abs(rand.nextInt()%(state.getWidth()/10));
		int y1 = Math.abs(rand.nextInt()%(state.getHeight()/10));
		int x2 = Math.abs(rand.nextInt()%(state.getWidth()/10));
		int y2 = Math.abs(rand.nextInt()%(state.getHeight()/10));
		
		newState.swap(x1, y1, x2, y2);
		
		return newState;
	}
	
	private double randomPercentage()
	{
		Random rand = new Random();
		return rand.nextDouble();
	}
	
	private double P(int cost, int newCost, double temperature)
	{
		return Math.exp(-(cost-newCost)/temperature);
	}
}
